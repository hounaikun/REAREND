1.nginx是什么：是一个高性能的HTTP和反向代理服务器。
2.nginx特点：占有内存少，并发能力强
3.反向代理：
	3.1正向代理：浏览器中配置代理服务器，通过代理服务器去访问目标服务器（已知目标服务器地址，需要在浏览器中配置）
	3.2反向代理：客户端对代理是无感的，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回客户端，
					此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器ip地址。（不知道数据源头是哪个服务器，由反	向代理服务器选择）
4.负载均衡：
	单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们说的负载均衡。
5.动静分离
	为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。
6.linux系统中安装
	6.1 nginx相关的依赖（先安装3个依赖）			
			zlib
				
			openssl

				使用 yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel 完成对上两个依赖的下载和安装

			pcre-8.37 
				下载：wget https://ftp.pcre.org/pub/pcre/pcre-8.37.tar.gz
				解压：tar -zxvf pcre-8.37.tar.gz
				进入解压目录，执行./configure
				执行 make && make install ，编译并安装(需要已经安装了gcc-c++)
				查看安装的版本：pcre-config --version

	6.2 安装nginx
			下载：wget http://nginx.org/download/nginx-1.12.2.tar.gz
			解压：tar -zxvf nginx-1.12.2.tar.gz
				进入解压目录，执行./configure
				执行 make && make install ，编译并安装
			安装目录：/usr/local/nginx
			启动脚本：/usr/local/nginx/sbin

	6.3 设置防火墙（如果不设置，外部访问不了;其中云服务器要配置安全组，放开80端口）
			防火墙启动：systemctl start firewalld
			防火墙停止：systemctl disable firewalld
			查看开放的端口号：firewall-cmd --list-all
			设置开放的端口：sudo firewall-cmd --add-port=80/tcp --permanent
			防火墙重启：firewall-cmd --reload

7.nginx常用命令
	7.1 首先进入到/usr/local/nginx/sbin
	7.2 查看nginx版本号
		./nginx -v
	7.3 启动nginx
		./nginx
	7.4 关闭nginx
		./nginx -s stop
	7.5 重新加在nginx
		./nginx -s reload

8.nginx的配置文件
	位置：/usr/local/nginx/conf/nginx.conf
	组成：nginx配置文件由三部分组成
	8.1 全局块
		从配置文件开始到events块之间的内容，主要会设置一些影响nginx服务器整体运行的配置指令
		比如：worker_processes  1;  worker_processes值越大，可以支持的并发处理量也越多
	8.2 events块
		events块涉及的指令主要影响Nginx服务器与用户的网络连接
		比如 worker_connections  1024;支持的最大连接数
	8.3 http块
		nginx 配置最频繁的部分
		http块也可以包括http全局块、server块

9.反向代理配置
	9.1 实现效果
		使用nginx反向代理，根据访问的路径跳转到不同的端口的服务中，nginx监听端口是9001，
			访问 http://ip:9001/edu/ 直接跳转到127.0.0.1:8081（tomcat）
			访问 http://ip:9001/vod/ 直接跳转到127.0.0.1:8082（tomcat）
	9.2 在windows系统的host文件进行域名和ip对应关系的配置
		C:\Windows\System32\drivers\etc\hosts 中配置
	9.3 修改配置文件
		server {
	        listen       80;  #监听的端口号
	        server_name  localhost; #监听的ip

	        #当浏览器输入上面的ip+端口的话就会执行下面location，可以写多个location和server
			location ~ .*\.fcgi$ {
				root cgi-bin;
					fastcgi_pass localhost:2000;
					fastcgi_index index.cgi;
					include fastcgi.conf;					
			}
		}
	9.4 location写法
		地址：https://www.cnblogs.com/phonecom/p/7216706.html
10.负载均衡
	10.1 实现效果
		浏览器输入http://ip/edu/a.html,负载均衡效果，平均分配到8080和8081端口中去
	10.2 修改配置文件
		upstream myserver{
			server ip:8080;
			server ip:8081;
		}
		server {
			listen       80;  #监听的端口号
	        server_name  ip; #监听的ip

	        #当浏览器输入上面的ip+端口的话就会执行下面location，可以写多个location和server
			location / {
				proxy_pass http://myserver;				
			}
		}
	10.3 分配服务器策略
		第一种：轮询（默认）
			每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
		第二种：权重
			weight 代表权重，默认是1，权重越高被分配的客户端越多
			upstream myserver{
				server ip:8080 weight = 5;
				server ip:8081 weight = 10;
			}
		第三种：ip_hash
			每个请求按访问ip的hash结果分配，这样每个访客（同一个ip）固定访问一个后端服务器，可以解决session问题
			upstream myserver{
				ip_hash;
				server ip:8080;
				server ip:8081;
			}
		第四种：fair
			按后端服务器的响应时间来分配请求，响应时间短的优先分配。
			upstream myserver{
				server ip:8080;
				server ip:8081;
				fair;
			}

11.动静分离
	11.1 概念
		不能理解成只是单纯的把动态页面和静态页面物理分开，应该是动态请求和静态请求分开，可以理解成使用Nginx处理静态页面，Tomcat处理动态页面；
		通过 location指定不同的后缀名实现不同的请求转发。通过 expires参数设置,可以览器缓存过期时间,减少与服务器之前的请求和流量。具体Expires定义:
			是给一个资源设定一个过期时间,也就是说无需去服务端验证,直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。(如果经常更新的文件不建议使用 Expires来缓存),我这里设置3d,表示在这3天之内访问这个URL,发送个请求,比对服务器该文件最后更新时间没有变化,则不会从服务器抓取,返回状态码304，如果有修改,则直接从服务器重新下载,返回状态码200

12.高可用
	12.1 概念
		主nginx宕机了，自动切换到备nginx
	12.2 准备工作
		- 需要两台服务器
		- 在两台服务器安装nginx
		- 在两台服务器安装keepalived
			安装命令：yum install keepalived -y
			安装目录：/etc/keepalived/keepalived.conf
	12.3 进行配置
		