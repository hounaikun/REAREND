1.高并发：
	它通常是指，通过设计保证系统能够同时并行处理很多请求。
2.NoSQL：
	不仅仅是SQL，泛指非关系型数据库，这些类型的数据存储不需要固定的模式，无需多余的操作就可以横向扩展。
	怎么玩：KV、Cache、Persistence
3.NoSQL数据模型:
	聚合模型：
		KV键值
		Bson：BSON之名缘于JSON，含义为Binary JSON（二进制JSON）
		列族：
		图：多对多
4.CAP原理：
	4.1 CAP是什么？
		C:强一致性（数据不能有差错）
		A:可用性(系统不能崩溃)
		P:分区容错性（又叫分布式容忍性）
	4.2 CAP三进二
		- 在分布式系统中，最多只能满足两个，但是P：分区容错性我们必须实现
		CA:单点集群，满足一致性、可用性的系统，通常在扩展性上不太强大；比如：Oracle
		CP:满足一致性，分区容错性的系统，性能不是特别高；比如：Redis、Mongodb
		AP:满足可用性，分区容错性的系统，对一致性要求低一点；比如：大多数网站架构的选择
5.BASE
	- 思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上的改观
	BA：基本可用
	S：软状态
	E：最终一致
6.分布式+集群
	分布式：不同的多台服务器上面部署不同的服务模块（工程），他们之间通过Rpc/Rmi之间通信和调用，对外提供服务和组内协作
	集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问
7.redis
	7.1是什么
		Redis：REmote DIctionary Server(远程字典服务器)，是一个高性能的（key/value）分布式内存数据库
		三个特点：
			- 支持数据持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用
			- 不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储
			- 支持数据的备份，即master-slave模式的数据备份
	7.2能干嘛
		内存存储和持久化、模拟httpSession、定时器、计数器
	7.3去哪下
		http://redis.io/ 英文
		http://www.redis.cn/ 中文
	7.4安装
		wget http://download.redis.io/releases/redis-5.0.5.tar.gz
		tar xzf redis-5.0.5.tar.gz
		cd redis-5.0.5
		make
		可能make会出错，gcc未安装。
		gcc
			是什么：linux下的一个编译程序，是c程序的编译工具
			安装：yum install gcc-c++

	7.5启动
		- 将redis.conf复制保存一份，修改配置文件
			找到GENERAL，修改daemonize no 为yes，保存退出（不要动原来的conf，动保存后的）
		- 启动redis
			./redis-server ./redis.conf 后面的conf为刚才修改的conf
			./redis-cli -p 6379
		- 连接redis
			./redis-cli
			如果更改了端口，使用`redis-cli`客户端连接时，也需要指定端口
			连接后的命令
				1 AUTH password 验证密码是否正确
				2 ECHO message 打印字符串
				3 PING 查看服务是否运行
				4 QUIT 关闭当前连接
				5 SELECT index 切换到指定的数据库
		- 关闭redis
			在连接后输入shutdown命令关闭redis，然后使用quit关闭当前连结
8.Redis数据类型
	8.1 String(字符串)
		- redis最基本的类型，一个key对应一个value
		- 二进制安全，意思是redis的string可以包含任何数据。比如jpg图片或者序列化对象。
		- 一个redis字符串value最多可以是512M

	8.2 Hash（哈希，类似java里面的Map）
		- 是一个键值对集合
		- 是一个string类型的field和value的映射表，hash特别适用于存储对象
	8.3 List（列表）
		- 简单的string字符串列表，按照插入顺序排序，你可以添加一个元素到列表的头部（左边）或者尾部（右边）
		- 底层是是个链表（有序有重复）
	8.4 Set（集合）
		- string类型的无序集合，通过hashTable实现的（无序不重复）
	8.5 Zset（sorted set：有序集合）
		- 和set一样也是string类型元素的集合，且不允许重复的成员
		- 不同的是每个元素都会关联一个double类型的分数
		- 通过分数来从小到大排序，zset成员是唯一的，但分数（score）可以重复
9.redis常见数据类型操作命令
	http://redisdoc.com
	注意：redis默认一共有16个库，从0-15， 个数在config里面配置 
			选择数据库 select 下标
10.key关键字
	常用命令：
		DEL key -> 用于在key存在时删除key
		DUMP key -> 序列化该key，并返回被序列化的值
		EXISTS key -> 检查该key是否存在
		EXPIRE key seconds -> 为给定key设置过期时间（秒）
		EXPIREAT key timestamp -> 为key设置过期时间(时间戳)
		PEXPIRE key milliseconds -> 为key设置过期时间(毫秒)
		PEXPIREAT key milliseconds-timestamp -> 为key设置过期时间(时间戳以毫秒计)
		KEYS pattern -> 查找所有符合给定模式（pattern）的key
		MOVE key db -> 将当前数据库的key移动到给定的数据库db中
		PERSIST key -> 移除key的过期时间，key将持续保持
		PTTL key -> 以毫秒为单位返回key的剩余过期时间
		TTL key -> 以秒为单位返回key的剩余过期时间(Time To Live)
		RANDOMKEY -> 从当前数据库中随机返回一个key
		RENAME key newkey -> 修改key的名称
		RENAMENX key newkey -> 仅当newkey不存在时，将key改名为newkey
		TYPE key -> 返回key所存储的值的类型
	案例（熟记）:
		keys * -> 查找所有的key
		exists key -> 检查该key是否存在
		ttl key -> 查看还有多少秒过期，-1代表永不过期，-2代表已过期（代表已移除）
		expire key 秒钟 -> 设置过期时间
		type key -> 查看你的key是什么类型
		move key db -> 将当前数据库的key移动到给定的数据库db中
11.String字符串
	常用命令：
		SET key value -> 设置指定key的值
		GET key -> 获取指定key的值
		GETRANGE key start end -> 返回key中字符串值的子符
		GETSET key value -> 将给定key的值设定为value，并返回key的旧值
		GETBIT key offset -> 对key存储的字符串值，获取指定偏移量上的位（bit）
		MGET k1[k2,...] -> 获取给定key（一个或者多个）的值
		SETBIT key offset value -> 对key存储的字符串值，设置或者清除指定偏移量上的位（bit）
		SETEX key seconds value -> 将值value关联到key，并将key的过期时间设为seconds（以秒为单位）
		SETNX key value -> 只有当key不存在时设置key的值
		SETRANGE key offset value -> 用value参数覆写给定key所存储的字符串，从偏移量offset开始
		STRLEN key -> 返回key所存储的字符串值的长度
		MSET key value[key value ...] -> 同时设置一个或者多个key-value对
		MSETNX key value[key value ...] -> 同时设置一个或者多个key-value对，当且仅当给定的key都不存在
		PSETEX key milliseconds value -> 将值value关联到key，并将key的过期时间设为seconds（以毫秒为单位）
		INCR key -> 将key中存储的数字值加1
		INCRBY key increment -> 将key中存储的数字值加increment
		INCRBYFLOAT key increment -> 将key中存储的数字值加increment(浮点增量值)
		DECR key -> 将key中存储的数字值减1
		DECRBY key decrement -> 将key中存储的数字值减decrement
		APPEND key value -> 如果可以已经存在并且是一个字符串，APPEND命令将value追加到key原来的值的末尾
	案例（熟记）：
		set/get/del/append/strlen
		incr/decr/incrby/decrby
		getrange/setrange
		setex(set with expire)/setnx(set if not exist)
		mset/mget/msetnx
		getset(先get再set)
12.List集合
	常用命令：
		BLPOP key1[key2] timeout -> 移出并获取列表的第一个元素，如果列表没有元素会阻塞列表知道等待超时或者发现可弹出元素为止
		BRPOP key1[key2] timeout -> 移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表知道等待超时或者发现可弹出元素为止
		BRPOPLPUSH source destination timeout -> 命令从列表中取出最后一个元素，并插入到另外一个列表的头部并返回它，如果列表没有元素会阻塞列表知道等待超时或者发现可弹出元素为止
		LINDEX key index -> 通过索引获取列表中的元素	
		LINSERT key BEFORE|AFTER pivot value -> 在列表的元素前或者后插入元素
		LLEN key -> 获取列表长度
		LPOP key -> 移出并获取列表的第一个元素
		LPUSH key value1 [value2] -> 将一个或多个值插入到列表头部
		LPUSHX key value -> 将一个值插入到已存在的列表头部
		LRANGE key start stop -> 获取列表指定范围内的元素
		LREM key count value -> 移除列表元素
		LSET key index value -> 通过索引设置列表元素的值
		LTRIM key start stop -> 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
		RPOP key -> 移除列表的最后一个元素，返回值为移除的元素。
		RPOPLPUSH source destination -> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回
		RPUSH key value1 [value2] -> 在列表中添加一个或多个值
		RPUSHX key value -> 为已存在的列表添加值
	案例（熟记）：
		lpush/rpush/lrange
		lpop/rpop
		lindex 通过索引获取列表中的元素(从上到下)
		llen
		lrem key count value 删N个value
		ltrim key 开始index 结束index ，截取指定范围的值后再赋值给key
		rpoplpush 源列表 目的列表
		lset key index value
		linsert key before/after 值1 值2
	性能介绍：
		- 它是一个字符串链表，left、right都可以插入添加
		- 如果键不存在，创建新的链表
		- 如果键已经存在，新增内容
		- 如果值全移除，对应的键也就消失了
13.Set集合
	常用命令：	
		SADD key member1 [member2] -> 向集合添加一个或多个成员
		SCARD key -> 获取集合的成员数
		SDIFF key1 [key2] -> 返回第一个集合与其他集合之间的差异。
		SDIFFSTORE destination key1 [key2] -> 返回给定所有集合的差集并存储在 destination 中
		SINTER key1 [key2] -> 返回给定所有集合的交集
		SINTERSTORE destination key1 [key2] -> 返回给定所有集合的交集并存储在 destination 中
		SISMEMBER key member -> 判断 member 元素是否是集合 key 的成员
		SMEMBERS key -> 返回集合中的所有成员
		SMOVE source destination member -> 将 member 元素从 source 集合移动到 destination 集合
		SPOP key -> 移除并返回集合中的一个随机元素
		SRANDMEMBER key [count] -> 返回集合中一个或多个随机数
		SREM key member1 [member2] -> 移除集合中一个或多个成员
		SUNION key1 [key2] -> 返回所有给定集合的并集
		SUNIONSTORE destination key1 [key2] -> 所有给定集合的并集存储在 destination 集合中
		SSCAN key cursor [MATCH pattern] [COUNT count] -> 迭代集合中的元素
	案例（熟记）:
		sadd/smembers/sismember
		scard
		srem key value 
		srandmember key
		spop key
		smove k1 k2 在k1里的某个值
		数学集合：
			sdiff：差集
			sinter：交集
			sunion：并集
14.Hash集合
	常用命令：
		HDEL key field1 [field2] -> 删除一个或多个哈希表字段
		HEXISTS key field -> 查看哈希表 key 中，指定的字段是否存在。
		HGET key field -> 获取存储在哈希表中指定字段的值。
		HGETALL key -> 获取在哈希表中指定 key 的所有字段和值
		HINCRBY key field increment -> 为哈希表 key 中的指定字段的整数值加上增量 increment 。
		HINCRBYFLOAT key field increment -> 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。
		HKEYS key -> 获取所有哈希表中的字段
		HLEN key -> 获取哈希表中字段的数量
		HMGET key field1 [field2] -> 获取所有给定字段的值
		HMSET key field1 value1 [field2 value2 ] -> 同时将多个 field-value (域-值)对设置到哈希表 key 中。
		HSET key field value -> 将哈希表 key 中的字段 field 的值设为 value 。
		HSETNX key field value -> 只有在字段 field 不存在时，设置哈希表字段的值。
		HVALS key -> 获取哈希表中所有值。
		HSCAN key cursor [MATCH pattern] [COUNT count] -> 迭代哈希表中的键值对。
	案例（熟记）: KV保持不变，value是一个键值对
		hset/hget/hmset/hmget/hgetall/hdel
		hlen
		hexists key 在key里边某个值的key
		hkeys/hvals
		hincrby/hincrbyfloat
		hsenx
15.zset集合
	常用命令：
		ZADD key score1 member1 [score2 member2] -> 向有序集合添加一个或多个成员，或者更新已存在成员的分数
		ZCARD key -> 获取有序集合的成员数
		ZCOUNT key min max -> 计算在有序集合中指定区间分数的成员数
		ZINCRBY key increment member -> 有序集合中对指定成员的分数加上增量 increment
		ZINTERSTORE destination numkeys key [key ...] -> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中
		ZLEXCOUNT key min max -> 在有序集合中计算指定字典区间内成员数量
		ZRANGE key start stop [WITHSCORES] -> 通过索引区间返回有序集合指定区间内的成	员
		ZRANGEBYLEX key min max [LIMIT offset count] -> 通过字典区间返回有序集合的成员
		ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] -> 通过分数返回有序集合指定区间内的成员
		ZRANK key member -> 返回有序集合中指定成员的索引
		ZREM key member [member ...] -> 移除有序集合中的一个或多个成员
		ZREMRANGEBYLEX key min max -> 移除有序集合中给定的字典区间的所有成员
		ZREMRANGEBYRANK key start stop -> 移除有序集合中给定的排名区间的所有成员
		ZREMRANGEBYSCORE key min max -> 移除有序集合中给定的分数区间的所有成员
		ZREVRANGE key start stop [WITHSCORES] -> 返回有序集中指定区间内的成员，通过索引，分数从高到低
		ZREVRANGEBYSCORE key max min [WITHSCORES] -> 返回有序集中指定分数区间内的成员，分数从高到低排序
		ZREVRANK key member -> 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
		ZSCORE key member -> 返回有序集中，成员的分数值
		ZUNIONSTORE destination numkeys key [key ...] -> 计算给定的一个或多个有序集的并集，并存储在新的 key 中
		ZSCAN key cursor [MATCH pattern] [COUNT count] -> 迭代有序集合中的元素（包括元素成员和元素分值）
	案例（熟记）: 在set基础上，加上一个score值。之前set是k1 v1 v2 v3,现在zset是 k1 score1 v1 score2 v2
		zadd/zrange
		zrangebyscore key 开始score 结束score
		zrem key 某score下对应的value值，作用是删除元素
		zcard/zcount key score区间/zrank key values值
		zrevrank key values值，作用是逆序获得下标值
		zrevrange
		zrevrangebyscore key 结束score 开始score
16.配置文件
	

