1.高并发：
	它通常是指，通过设计保证系统能够同时并行处理很多请求。
2.NoSQL：
	不仅仅是SQL，泛指非关系型数据库，这些类型的数据存储不需要固定的模式，无需多余的操作就可以横向扩展。
	怎么玩：KV、Cache、Persistence
3.NoSQL数据模型:
	聚合模型：
		KV键值
		Bson：BSON之名缘于JSON，含义为Binary JSON（二进制JSON）
		列族：
		图：多对多
4.CAP原理：
	4.1 CAP是什么？
		C:强一致性（数据不能有差错）
		A:可用性(系统不能崩溃)
		P:分区容错性（又叫分布式容忍性）
	4.2 CAP三进二
		- 在分布式系统中，最多只能满足两个，但是P：分区容错性我们必须实现
		CA:单点集群，满足一致性、可用性的系统，通常在扩展性上不太强大；比如：Oracle
		CP:满足一致性，分区容错性的系统，性能不是特别高；比如：Redis、Mongodb
		AP:满足可用性，分区容错性的系统，对一致性要求低一点；比如：大多数网站架构的选择
5.BASE
	- 思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上的改观
	BA：基本可用
	S：软状态
	E：最终一致
6.分布式+集群
	分布式：不同的多台服务器上面部署不同的服务模块（工程），他们之间通过Rpc/Rmi之间通信和调用，对外提供服务和组内协作
	集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问
7.redis
	7.1是什么
		Redis：REmote DIctionary Server(远程字典服务器)，是一个高性能的（key/value）分布式内存数据库
		三个特点：
			- 支持数据持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用
			- 不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储
			- 支持数据的备份，即master-slave模式的数据备份
	7.2能干嘛
		内存存储和持久化、模拟httpSession、定时器、计数器
	7.3去哪下
		http://redis.io/ 英文
		http://www.redis.cn/ 中文
	7.4安装
		wget http://download.redis.io/releases/redis-5.0.5.tar.gz
		tar xzf redis-5.0.5.tar.gz
		cd redis-5.0.5
		make
		可能make会出错，gcc未安装。
		gcc
			是什么：linux下的一个编译程序，是c程序的编译工具
			安装：yum install gcc-c++

	7.5启动
		- 将redis.conf复制保存一份，修改配置文件
			找到GENERAL，修改daemonize no 为yes，保存退出（不要动原来的conf，动保存后的）
		- 启动redis
			./redis-server ./redis.conf 后面的conf为刚才修改的conf
			./redis-cli -p 6379
		- 连接redis
			./redis-cli
			如果更改了端口，使用`redis-cli`客户端连接时，也需要指定端口
			连接后的命令
				1 AUTH password 验证密码是否正确
				2 ECHO message 打印字符串
				3 PING 查看服务是否运行
				4 QUIT 关闭当前连接
				5 SELECT index 切换到指定的数据库
		- 关闭redis
			在连接后输入shutdown命令关闭redis，然后使用quit关闭当前连结
8.Redis数据类型
	8.1 String(字符串)
		- redis最基本的类型，一个key对应一个value
		- 二进制安全，意思是redis的string可以包含任何数据。比如jpg图片或者序列化对象。
		- 一个redis字符串value最多可以是512M

	8.2 Hash（哈希，类似java里面的Map）
		- 是一个键值对集合
		- 是一个string类型的field和value的映射表，hash特别适用于存储对象
	8.3 List（列表）
		- 简单的string字符串列表，按照插入顺序排序，你可以添加一个元素到列表的头部（左边）或者尾部（右边）
		- 底层是是个链表（有序有重复）
	8.4 Set（集合）
		- string类型的无序集合，通过hashTable实现的（无序不重复）
	8.5 Zset（sorted set：有序集合）
		- 和set一样也是string类型元素的集合，且不允许重复的成员
		- 不同的是每个元素都会关联一个double类型的分数
		- 通过分数来从小到大排序，zset成员是唯一的，但分数（score）可以重复
9.redis常见数据类型操作命令
	http://redisdoc.com
	注意：redis默认一共有16个库，从0-15， 个数在config里面配置 
			选择数据库 select 下标
10.key关键字
	常用命令：
		DEL key -> 用于在key存在时删除key
		DUMP key -> 序列化该key，并返回被序列化的值
		EXISTS key -> 检查该key是否存在
		EXPIRE key seconds -> 为给定key设置过期时间（秒）
		EXPIREAT key timestamp -> 为key设置过期时间(时间戳)
		PEXPIRE key milliseconds -> 为key设置过期时间(毫秒)
		PEXPIREAT key milliseconds-timestamp -> 为key设置过期时间(时间戳以毫秒计)
		KEYS pattern -> 查找所有符合给定模式（pattern）的key
		MOVE key db -> 将当前数据库的key移动到给定的数据库db中
		PERSIST key -> 移除key的过期时间，key将持续保持
		PTTL key -> 以毫秒为单位返回key的剩余过期时间
		TTL key -> 以秒为单位返回key的剩余过期时间(Time To Live)
		RANDOMKEY -> 从当前数据库中随机返回一个key
		RENAME key newkey -> 修改key的名称
		RENAMENX key newkey -> 仅当newkey不存在时，将key改名为newkey
		TYPE key -> 返回key所存储的值的类型
	案例（熟记）:
		keys * -> 查找所有的key
		exists key -> 检查该key是否存在
		ttl key -> 查看还有多少秒过期，-1代表永不过期，-2代表已过期（代表已移除）
		expire key 秒钟 -> 设置过期时间
		type key -> 查看你的key是什么类型
		move key db -> 将当前数据库的key移动到给定的数据库db中
11.String字符串
	常用命令：
		SET key value -> 设置指定key的值
		GET key -> 获取指定key的值
		GETRANGE key start end -> 返回key中字符串值的子符
		GETSET key value -> 将给定key的值设定为value，并返回key的旧值
		GETBIT key offset -> 对key存储的字符串值，获取指定偏移量上的位（bit）
		MGET k1[k2,...] -> 获取给定key（一个或者多个）的值
		SETBIT key offset value -> 对key存储的字符串值，设置或者清除指定偏移量上的位（bit）
		SETEX key seconds value -> 将值value关联到key，并将key的过期时间设为seconds（以秒为单位）
		SETNX key value -> 只有当key不存在时设置key的值
		SETRANGE key offset value -> 用value参数覆写给定key所存储的字符串，从偏移量offset开始
		STRLEN key -> 返回key所存储的字符串值的长度
		MSET key value[key value ...] -> 同时设置一个或者多个key-value对
		MSETNX key value[key value ...] -> 同时设置一个或者多个key-value对，当且仅当给定的key都不存在
		PSETEX key milliseconds value -> 将值value关联到key，并将key的过期时间设为seconds（以毫秒为单位）
		INCR key -> 将key中存储的数字值加1
		INCRBY key increment -> 将key中存储的数字值加increment
		INCRBYFLOAT key increment -> 将key中存储的数字值加increment(浮点增量值)
		DECR key -> 将key中存储的数字值减1
		DECRBY key decrement -> 将key中存储的数字值减decrement
		APPEND key value -> 如果可以已经存在并且是一个字符串，APPEND命令将value追加到key原来的值的末尾
	案例（熟记）：
		set/get/del/append/strlen
		incr/decr/incrby/decrby
		getrange/setrange
		setex(set with expire)/setnx(set if not exist)
		mset/mget/msetnx
		getset(先get再set)
12.List集合
	常用命令：
		BLPOP key1[key2] timeout -> 移出并获取列表的第一个元素，如果列表没有元素会阻塞列表知道等待超时或者发现可弹出元素为止
		BRPOP key1[key2] timeout -> 移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表知道等待超时或者发现可弹出元素为止
		BRPOPLPUSH source destination timeout -> 命令从列表中取出最后一个元素，并插入到另外一个列表的头部并返回它，如果列表没有元素会阻塞列表知道等待超时或者发现可弹出元素为止
		LINDEX key index -> 通过索引获取列表中的元素	
		LINSERT key BEFORE|AFTER pivot value -> 在列表的元素前或者后插入元素
		LLEN key -> 获取列表长度
		LPOP key -> 移出并获取列表的第一个元素
		LPUSH key value1 [value2] -> 将一个或多个值插入到列表头部
		LPUSHX key value -> 将一个值插入到已存在的列表头部
		LRANGE key start stop -> 获取列表指定范围内的元素
		LREM key count value -> 移除列表元素
		LSET key index value -> 通过索引设置列表元素的值
		LTRIM key start stop -> 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
		RPOP key -> 移除列表的最后一个元素，返回值为移除的元素。
		RPOPLPUSH source destination -> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回
		RPUSH key value1 [value2] -> 在列表中添加一个或多个值
		RPUSHX key value -> 为已存在的列表添加值
	案例（熟记）：
		lpush/rpush/lrange
		lpop/rpop
		lindex 通过索引获取列表中的元素(从上到下)
		llen
		lrem key count value 删N个value
		ltrim key 开始index 结束index ，截取指定范围的值后再赋值给key
		rpoplpush 源列表 目的列表
		lset key index value
		linsert key before/after 值1 值2
	性能介绍：
		- 它是一个字符串链表，left、right都可以插入添加
		- 如果键不存在，创建新的链表
		- 如果键已经存在，新增内容
		- 如果值全移除，对应的键也就消失了
13.Set集合
	常用命令：	
		SADD key member1 [member2] -> 向集合添加一个或多个成员
		SCARD key -> 获取集合的成员数
		SDIFF key1 [key2] -> 返回第一个集合与其他集合之间的差异。
		SDIFFSTORE destination key1 [key2] -> 返回给定所有集合的差集并存储在 destination 中
		SINTER key1 [key2] -> 返回给定所有集合的交集
		SINTERSTORE destination key1 [key2] -> 返回给定所有集合的交集并存储在 destination 中
		SISMEMBER key member -> 判断 member 元素是否是集合 key 的成员
		SMEMBERS key -> 返回集合中的所有成员
		SMOVE source destination member -> 将 member 元素从 source 集合移动到 destination 集合
		SPOP key -> 移除并返回集合中的一个随机元素
		SRANDMEMBER key [count] -> 返回集合中一个或多个随机数
		SREM key member1 [member2] -> 移除集合中一个或多个成员
		SUNION key1 [key2] -> 返回所有给定集合的并集
		SUNIONSTORE destination key1 [key2] -> 所有给定集合的并集存储在 destination 集合中
		SSCAN key cursor [MATCH pattern] [COUNT count] -> 迭代集合中的元素
	案例（熟记）:
		sadd/smembers/sismember
		scard
		srem key value 
		srandmember key
		spop key
		smove k1 k2 在k1里的某个值
		数学集合：
			sdiff：差集
			sinter：交集
			sunion：并集
14.Hash集合
	常用命令：
		HDEL key field1 [field2] -> 删除一个或多个哈希表字段
		HEXISTS key field -> 查看哈希表 key 中，指定的字段是否存在。
		HGET key field -> 获取存储在哈希表中指定字段的值。
		HGETALL key -> 获取在哈希表中指定 key 的所有字段和值
		HINCRBY key field increment -> 为哈希表 key 中的指定字段的整数值加上增量 increment 。
		HINCRBYFLOAT key field increment -> 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。
		HKEYS key -> 获取所有哈希表中的字段
		HLEN key -> 获取哈希表中字段的数量
		HMGET key field1 [field2] -> 获取所有给定字段的值
		HMSET key field1 value1 [field2 value2 ] -> 同时将多个 field-value (域-值)对设置到哈希表 key 中。
		HSET key field value -> 将哈希表 key 中的字段 field 的值设为 value 。
		HSETNX key field value -> 只有在字段 field 不存在时，设置哈希表字段的值。
		HVALS key -> 获取哈希表中所有值。
		HSCAN key cursor [MATCH pattern] [COUNT count] -> 迭代哈希表中的键值对。
	案例（熟记）: KV保持不变，value是一个键值对
		hset/hget/hmset/hmget/hgetall/hdel
		hlen
		hexists key 在key里边某个值的key
		hkeys/hvals
		hincrby/hincrbyfloat
		hsenx
15.zset集合
	常用命令：
		ZADD key score1 member1 [score2 member2] -> 向有序集合添加一个或多个成员，或者更新已存在成员的分数
		ZCARD key -> 获取有序集合的成员数
		ZCOUNT key min max -> 计算在有序集合中指定区间分数的成员数
		ZINCRBY key increment member -> 有序集合中对指定成员的分数加上增量 increment
		ZINTERSTORE destination numkeys key [key ...] -> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中
		ZLEXCOUNT key min max -> 在有序集合中计算指定字典区间内成员数量
		ZRANGE key start stop [WITHSCORES] -> 通过索引区间返回有序集合指定区间内的成	员
		ZRANGEBYLEX key min max [LIMIT offset count] -> 通过字典区间返回有序集合的成员
		ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] -> 通过分数返回有序集合指定区间内的成员
		ZRANK key member -> 返回有序集合中指定成员的索引
		ZREM key member [member ...] -> 移除有序集合中的一个或多个成员
		ZREMRANGEBYLEX key min max -> 移除有序集合中给定的字典区间的所有成员
		ZREMRANGEBYRANK key start stop -> 移除有序集合中给定的排名区间的所有成员
		ZREMRANGEBYSCORE key min max -> 移除有序集合中给定的分数区间的所有成员
		ZREVRANGE key start stop [WITHSCORES] -> 返回有序集中指定区间内的成员，通过索引，分数从高到低
		ZREVRANGEBYSCORE key max min [WITHSCORES] -> 返回有序集中指定分数区间内的成员，分数从高到低排序
		ZREVRANK key member -> 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
		ZSCORE key member -> 返回有序集中，成员的分数值
		ZUNIONSTORE destination numkeys key [key ...] -> 计算给定的一个或多个有序集的并集，并存储在新的 key 中
		ZSCAN key cursor [MATCH pattern] [COUNT count] -> 迭代有序集合中的元素（包括元素成员和元素分值）
	案例（熟记）: 在set基础上，加上一个score值。之前set是k1 v1 v2 v3,现在zset是 k1 score1 v1 score2 v2
		zadd/zrange
		zrangebyscore key 开始score 结束score
		zrem key 某score下对应的value值，作用是删除元素
		zcard/zcount key score区间/zrank key values值
		zrevrank key values值，作用是逆序获得下标值
		zrevrange
		zrevrangebyscore key 结束score 开始score
16.配置文件
		详解：https://www.cnblogs.com/AlanLee/p/7053577.html
		config命令（可获得配置文件的内容，例如密码、文件目录）：https://www.cnblogs.com/hello-/articles/9647434.html

		常见配置：
			参数说明
			redis.conf 配置项说明如下：
			1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程
			daemonize no
			2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定
			pidfile /var/run/redis.pid
			3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字
			port 6379
			4. 绑定的主机地址
			bind 127.0.0.1
			5. 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能
			timeout 300
			6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose
			loglevel verbose
			7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null
			logfile stdout
			8. 设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id
			databases 16
			9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合
			save
			Redis默认配置文件中提供了三个条件：
			save 900 1
			save 300 10
			save 60 10000
			分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。
			10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大
			rdbcompression yes
			11. 指定本地数据库文件名，默认值为dump.rdb
			dbfilename dump.rdb
			12. 指定本地数据库存放目录
			dir ./
			13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步
			slaveof
			14. 当master服务设置了密码保护时，slav服务连接master的密码
			masterauth
			15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭
			requirepass foobared
			16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息
			maxclients 128
			17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区
			maxmemory
			18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no
			appendonly no
			19. 指定更新日志文件名，默认为appendonly.aof
			appendfilename appendonly.aof
			20. 指定更新日志条件，共有3个可选值：
			no：表示等操作系统进行数据缓存同步到磁盘（快）
			always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）
			everysec：表示每秒同步一次（折衷，默认值）
			appendfsync everysec
			21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）
			vm-enabled no
			22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享
			vm-swap-file /tmp/redis.swap
			23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0
			vm-max-memory 0
			24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值
			vm-page-size 32
			25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，在磁盘上每8个pages将消耗1byte的内存。
			vm-pages 134217728
			26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4
			vm-max-threads 4
			27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启
			glueoutputbuf yes
			28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法
			hash-max-zipmap-entries 64
			hash-max-zipmap-value 512
			29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）
			activerehashing yes
			30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件
			include /path/to/local.conf
17.持久化
	rdb(Redis DataBase):
		是什么：
			在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里
			会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束了，再用这个临时文件替换上次持久化好的文件
			整个过程中，主进程不进行任何io操作
			大规模恢复数据时，若对数据要求不那么精确，那么rdb比aof更加高效
			缺点：
				最后一次持久化后的数据可能丢失
		Fork:
			复制一个与当前进程一样的进程
		保存文件格式：
			dump.rdb文件
		如何触发rdb快照：
			bgsave/save命令：
				save：只管保存，其他不管，全部阻塞
				bgsave：redis会在后台异步进行快照操作
			配置文件默认快照配置
			执行flushall命令，也会产生dump.rdb文件，但里面是空的，毫无意义
	aof(Append Only File):
		是什么：
			以日志的形式来记录每个写操作，只许增加文件但不可以修改文件，redis启动之初会读取该文件重新构建数据
		aof启动/修复/恢复：
			正常恢复：
				启动：设置yes （修改默认的appendonly no，改为yes）
				将有数据的aof文件复制一份保存到对应的目录（config get dir）
				恢复：重启redis然后重新加载
			异常恢复：
				启动：设置yes
				备份被写坏的aof文件
				修复：redis-check-aof --fix进行修复
				恢复：重启redis然后重新加载
		Rewrite：
			是什么：
				aof采用文件追加的方式，文件会越来越大，为避免出现此情况，新增了重写机制，当aof文件大小超过所设定的阈值时，redis就会启动aof文件的压缩，
					只保留恢复数据的最小指令集，可以使用命令bgrewriteaof
			重写原理：
				aof文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件左后再rename），将整个内存中的数据库内容用命令的方式重写一个
					新的aof文件，和快照有点类似
			触发机制：
				redis会记录上次重写时的aof大小，默认配置时当aof文件大小是上次rewrite的一倍且文件大小大于64M时触发
	如果同时选择两种：
		这种情况下，当redis重启的时候会优先加载aof文件来恢复原始的数据，因为通常情况下aof文件保存的数据集要比rdb文件保存的数据集完整
		rdb数据不实时，同时使用两者时服务器重启时也会只找aof文件
18.事务
	是什么：
		可以一次执行多个命令，本质是一组命令的集合，一个事务中的所用命令都会序列化，按顺序的串行化执行而不会被其他命令插入，不许加塞
	能干嘛：
		一个队列中，一次性、顺序性、排他性的执行一系列命令
	怎么玩：
		常用命令：
			discard：取消事务，放弃执行事务块内的所有命令
			exec：执行所有事务块内的命令
			multi：标记一个事务块的开始
			unwatch：取消watch命令对所有key的监视
			wathch key1[key2、key3...]：监视一个（或多个）key，如果事务执行之前这些key被其他命令所改动，那么事务将被打断
		case 1：
			正常执行	
		case 2：
			放弃事务
		case 3：
			全体连坐
		case 4：
			冤头债主：类似编译就报错的就是全体连坐，都不执行，但是类似运行时报错的，冤头债主，谁错找谁；所以说reids部分支持事务
		case 5：
			watch监控：
				悲观锁：
					就是每次拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿数据就会block直到它拿到锁。
						传统的关系型数据库里边就用到了很多这种锁机制，比如行锁、表锁、读锁、写锁等，都是在操作前先上锁
				乐观锁:
					就是每次拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，
						可以使用版本号等机制，乐观锁适用于多读的应用类型，这样可以提高吞吐量
					策略：提交版本必须大于记录当前版本才能执行更新
				CAS(Check And Set):
			一旦执行了exec，之前加的监控锁都会被取消掉了
			小结：
				watch指令类似乐观锁，事务提交时，如果key的值已被别的客户端改变，比如某个list已被别的客户端push/pop过了，整个事务队列都不会被执行
				通过watch命令在事务执行之前监控了多个keys，倘若在watch之后有任何key的值发生了变化，exec命令执行的事务都将被放弃，同时返回
					Nullmulti-bulk应答以通知调用者事务执行失败
	3阶段：
		开启：以multi开始一个事务
		入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面
		执行：由exec命令触发事务
	3特性：
		单独的隔离操作:事务中的所有命令都会序列化、按顺序的执行。事务在执行的过程中，不会被其他客户端发送来的命令所打断
		没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行
		不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令任然会被执行，没有回滚

19.redis的发布订阅机制
	是什么：
		进程间的一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息

20.redis的复制
	是什么：
		行话：也就是我们说的主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slaver以读为主。
	能干吗：
		读写分离、容灾恢复
	怎么玩：
		1.配从（库）不配主（库）
		2.从库配置：
			slaveof 主库IP 主库端口（每次与master断开之后，都需要重新连接，除非你配置进reids.conf文件）
		3.修改配置文件细节操作：
			拷贝多个redis.conf文件
			开启daemonize yes
			pid文件名字
			指定端口
			Log文件名字
			Dump.rdb名字
		4.常用3招
			一主二仆：info replication、slaveof 主库IP 主库端口
			薪火相传：上一个Slaver可以是下一个slave的Master，Slaver同样可以接收其它slaver的连接和同步请求，那么该slaver作为链条中的master
						可以有效减轻master写的压力
					中途变更转向：会清除之前的数据，重新建立拷贝最新的
					slaveof 新主库IP 新主库端口
			反客为主：slaver no one 使当前数据库停止与其他数据库的同步，转成主数据库
	复制原理：
		Slaver启动成功后连接master后会发送一个sync命令
		Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕后，master将传送整个数据文件到slave，以完成一次完全同步
		全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中
		增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步
		但是只要是重新连接Master，一次完全同步（全量复制）将自动被执行
	哨兵模式：
		是什么?
			反客为主的自动版，能够后台监控主机是否故障，如果故障了根据票数自动将从库变为主库
		怎么玩？
			自定义/myredis目录下新建sentinel.conf文件，名字绝对不能为错
			配置哨兵，填写内容：
				sentinel monitor 被监控主机的名字（自己起名字） 127.0.0.1 6379 1
				上面最后一个数字1，表示主机挂掉后salve投票让谁接替成为主机，得票数多的成为主机
			启动哨兵：
				Redis-sentinel /myredis/sentinel.conf
			问题：如果之前的master重启回来，会不会双master冲突？不会，回来之后成为slaver
		一组sentinel能同时监控多个master
21.Jedis
	21.1 引入依赖
	     <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.7.1</version><!--版本号可根据实际情况填写-->
         </dependency>
         <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.3.2</version>!--版本号可根据实际情况填写-->
         </dependency>
    21.2 测试连接
    	public class TestPing {
		    public static void main(String[] args) {
		        Jedis jedis = new Jedis("127.0.0.1",6379);
		        System.out.println(jedis.ping());
		    }
		}
	21.3 事务
最终（面试）：
		https://zhuanlan.zhihu.com/p/93515595
		https://www.jianshu.com/p/65765dd10671
☆视频再看几遍。。。
redistemplate
