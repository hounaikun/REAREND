服务端：

package com.zezhong.util;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Arrays;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.apache.commons.io.IOUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.alibaba.fastjson.JSONObject;
import com.zezhong.cbod.flex.Factory.ServiceFactory;
import com.zezhong.cbod.flex.service.inter.ITestApplicationService;

public class SocketTestReport implements Runnable {

	private ITestApplicationService testApplicationService = ServiceFactory.getInstance().getTestApplicationService();
	private ServerSocket serverSocket;
	private static Log log = LogFactory.getLog(SocketTestReport.class);

	public void run() {
		try {
			if (serverSocket == null) {
				serverSocket = new ServerSocket(5926);
				log.info("测试报告下载：服务器初始化成功！监听端口号 " + serverSocket.getLocalPort());
			} 
		} catch (Exception e) {
			e.printStackTrace();
		}
		while (true) {
			Socket socket = null;
			BufferedReader br = null;
			ZipOutputStream zos = null;
			DataOutputStream dos = null;
			try {
				socket = serverSocket.accept();
				log.info("测试报告下载：客户端连接成功！");
				br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
				// 读取客户端发送来的消息
				String mess = br.readLine();
				JSONObject jsonObj = JSONObject.parseObject(mess);
	//            System.out.println(jsonObj);
				log.info("测试报告下载：入参 "+jsonObj);
				List<File> list = testApplicationService.getFileList(jsonObj);
	
				ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
				zos = new ZipOutputStream(outputStream);
				for (File srcFile : list) {
					FileInputStream in = null;
					try {
						byte[] buf = new byte[2 * 1024];
						zos.putNextEntry(new ZipEntry(srcFile.getName()));
						int len;
						in = new FileInputStream(srcFile);
						while ((len = in.read(buf)) != -1) {
							zos.write(buf, 0, len);
						}
						zos.closeEntry();
					}finally {
						this.close(in);
					}
				}
				IOUtils.closeQuietly(zos);
				byte[] data = outputStream.toByteArray();
	
				dos = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
				
				if(list.size() <= 0) {
					log.info("测试报告下载：文件不存在，下载失败！ ");
					dos.writeUTF("文件不存在，下载失败！");
					dos.flush();
					dos.writeBoolean(false);
					dos.flush();
				} else {
					log.info("测试报告下载：下载成功！文件名  testReport.zip");
					dos.writeUTF("testReport.zip");
					dos.flush();
					dos.writeBoolean(true);
					dos.flush();
					dos.write(data, 0, data.length);
					dos.flush();
				}
			}catch (Exception e) {
				e.printStackTrace();
			} finally {
				log.info("测试报告下载：客户端断开连接，客户端IP "+socket.getRemoteSocketAddress());
				this.close(dos,zos,br,socket);
				//			IOUtils.closeQuietly(dos);
				//			IOUtils.closeQuietly(br);
				//			IOUtils.closeQuietly(socket);
			}
		}
		
	}

	private void close(Closeable... closeables) {
        Arrays.stream(closeables).forEach(c -> {
            try {
                if(c !=null) c.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }
	public static void main(String[] args) {
		Thread desktopServerThread = new Thread(new SocketTestReport()); // 启动服务
		desktopServerThread.start();
	}

}



客户端：
@Test
    public void test02() {
        Socket socket = null;
        BufferedWriter bw = null;
        DataInputStream dis = null;
        DataOutputStream os = null;
        try {
            socket = new Socket("127.0.0.1", 5926);
            OutputStream outputStream = socket.getOutputStream();
            JSONObject jsonObj = new JSONObject();
            jsonObj.put("id", 11);
            jsonObj.put("joinType", "req");
            jsonObj.put("type", "word");
            bw = new BufferedWriter(new OutputStreamWriter(outputStream));
            //向服务器端发送一条消息
            bw.write(jsonObj.toJSONString());
            bw.flush();
            socket.shutdownOutput();

            dis = new DataInputStream(socket.getInputStream()); // 获取socket中的InputStream
            String msgOrName = dis.readUTF();
            boolean flag = dis.readBoolean();
            if(flag) {
                String fileName  = "G:\\泽众\\03工作文档\\tem\\" + msgOrName;
                os = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(new File(fileName)))); // 初始化OutputStream
                int count = 0;
                byte[] buffer = new byte[dis.available()];
                while ((count = dis.read(buffer)) != -1) { // 把socket中的InputStream放入OutputStream
                    os.write(buffer, 0, count);
                    os.flush();
                }
            }else {
                System.out.println(msgOrName);
            }

        }catch (Exception e) {
            e.printStackTrace();
        }finally {
            close(os,dis,bw,socket);
        }
    }
    private void close(Closeable... closeables) {
        Arrays.stream(closeables).forEach(c -> {
            try {
                if(c !=null) c.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }