导包：
	<dependency>
	  <groupId>org.mybatis</groupId>
	  <artifactId>mybatis</artifactId>
	  <version>x.x.x</version>
	</dependency>
	<dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.47</version>
    </dependency>
文档：
	官网：https://mybatis.org/mybatis-3/zh/index.html
	离线：

一、全局配置文件
	<?xml version="1.0" encoding="UTF-8" ?>
	<!DOCTYPE configuration
	        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
	        "http://mybatis.org/dtd/mybatis-3-config.dtd">
	<configuration>
	    <!--
	        mybatis可以使用properties来引入外部properties配置文件的内容
	        resource：引入类路径下的资源
	        url：引入网络路径或者磁盘路径下的资源
	    -->
	    <properties resource="mybatis-config.xml">
		<!--<property name="" value=""/> 可以额外配置属性-->
	    </properties>
	    <!--
	        settings 包含很多重要的设置项
	        setting:用来设置每一个设置项
	            name: 设置项名
	            value：设置项取值

	        mapUnderscoreToCamelCase:是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。
	    -->
	    <settings>
	        <setting name="mapUnderscoreToCamelCase" value="true"/>
	    </settings>

	    <!--typeAliases:别名处理器，可以为我们的java类型起别名，别名不区分大小写-->
	    <typeAliases>
	        <!--1.typeAlias:为某个java类型起别名
	                type:指定要起别名的类型全类名；默认别名就是类名小写
	                alias:制定新的别名
	        -->
	        <!-- <typeAlias type="" alias=""/>-->
	        <!--
	            2。package:为某个包下的所有类批量起别名
	                name:指定包名（为当前包以及下面所有的包后代的每一个类都起一个默认别名（类名小写））
	        -->
	        <!--<package name="com.kun.entity"/>-->
	        <!--3.批量起别名的情况下，使用@Alias注解为某个类型指定新的别名-->
	    </typeAliases>
	    <!--类型处理器（typeHandlers）
        MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时，
          都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。
            类型处理器 	        Java 类型 	                JDBC 类型
            BooleanTypeHandler 	java.lang.Boolean, boolean 	数据库兼容的 BOOLEAN
            ByteTypeHandler 	java.lang.Byte, byte 	    数据库兼容的 NUMERIC 或 BYTE
            ShortTypeHandler 	java.lang.Short, short 	    数据库兼容的 NUMERIC 或 SMALLINT
            IntegerTypeHandler 	java.lang.Integer, int 	    数据库兼容的 NUMERIC 或 INTEGER
            LongTypeHandler 	java.lang.Long, long 	    数据库兼容的 NUMERIC 或 BIGINT
            ...
	    -->	
	    <typeHandlers>

	    </typeHandlers>
	    <!--
	       environments:环境们，mybatis可以配置多种环境，default指定当前使用某种环境，可以达到快速切换环境
	            environment: 配置一个具体的环境，必须有两个标签；id代表当前环境的唯一标识
	                transactionManager:事务管理器；
	                    type：事务管理器的类型；JDBC（JdbcTransactionFactory）| MANAGED
	                                自定义事务管理器:实现TransactionFactory接口,type指定为全类名
	                dataSource：数据源
	                    type:数据源类型；UNPOOLED(UnpooledDataSourceFactory)
	                                    |POOLED(PooledDataSourceFactory)
	                                    |JNDI(JndiDataSourceFactory)
	                       自定义数据源，实现DataSourceFactory接口，type是全类名

	       -->
	    <!--
	    如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：
	        首先读取在 properties 元素体内指定的属性。
	        然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，
	            并覆盖之前读取过的同名属性。
	        最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。
	        因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，
	            最低优先级的则是 properties 元素中指定的属性。
	    -->
	    <environments default="development">
	        <environment id="development">
	            <transactionManager type="JDBC"/>
	            <dataSource type="POOLED">
	                <property name="driver" value="${driver}"/>
	                <property name="url" value="${url}"/>
	                <property name="username" value="${username}"/>
	                <property name="password" value="${password}"/>
	            </dataSource>
	        </environment>
	    </environments>
	    <!--  mappers：将我们写好的sql映射文件XXXMapper.xml注册到全局配置文件  -->
	    <mappers>
	        <!--mapper:注册一个sql映射
	            resource:引用类路径下的sql映射文件
	            url：引用网络路径或者磁盘路径下的sql映射文件        
	        -->
	        <!--<mapper resource=""/>-->
	        
	        <!--
	            注册接口
	            class:引用（注册）接口
	                1.sql映射文件，映射文件名必须和接口同名，并且放到与接口同一目录下
	                2.没有sql映射文件，所有的sql都是利用注解写在接口上；
	            推荐：
	                比较重要的，复杂的Dao接口我们来写sql映射文件
	                不重要，简单的Dao接口为了开发快速可以使用注解

	            注意：如果接口和mapper文件不在同一个包下，那么扫描到的只有Mapper接口而已，为此还需要另外对Mapper.xml进行配置
	        -->
	        <!--mapper class=""/>-->
	        
	        <!--批量注册，也是接口扫描器，也需要接口和xml文件在同一个目录下
	        	注意：src/main/java 在maven打包时不会打包其中不是源码的文件，所以xml文件不要放在java下，
	        			要放在resource下，java和resource都是类路径，打包时会将两个文件内容合在一起
	        	-->
	        <package name="com.kun.dao"/>
	    </mappers>
	</configuration>

二、映射文件
	<?xml version="1.0" encoding="UTF-8" ?>
	<!DOCTYPE mapper
	        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<!--命名空间，和接口相对应，故写接口的全限定名-->
	<mapper namespace="com.kun.dao.StudentDao">
	    <!--和接口的方法相对应，id就是接口中的方法名
	        parameterType="int" 传参类型
	            将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，
	            因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。
	        resultType="hashmap"    返回值类型
	            期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，
	            而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。
	    -->
	    <select id="queryAllStudent" resultType="com.kun.entity.Student">
	        select * from student
	    </select>
	    <!--
	        这就告诉 MyBatis 创建一个预处理语句（PreparedStatement）参数，在 JDBC 中，
	        这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中.
	    -->
	    <select id="queryStudentByID" parameterType="Integer" resultType="com.kun.entity.Student">
	        select * from student
	        where s_id = #{id}
	    </select>
	    <!--
	        mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreateKeys()
	        useGeneratedkeys="true";使用自增主键获取主键值策略
	        keyProperty="":指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	    -->
	    <insert id="addStudent" parameterType="com.kun.entity.Student"
	    	useGeneratedKeys="true" keyProperty="sId">
	        insert into student(s_no,s_name,s_age) VALUES (REPLACE(UUID(),'-',''),#{sName},#{sAge})
	    </insert>
	    <update id="updateStudent" parameterType="com.kun.entity.Student">
	        update student set s_name = #{sName} ,s_age = #{sAge} where s_no = #{sNo}
	    </update>
	    <delete id="deleteStudent">
	        delete from student where s_no = #{sNo}
	    </delete>
	</mapper>

三、测试类
	/**
	 * @description: <p>
	 * 1.SqlSession代表和数据库的一次会话，用完必须关闭
	 * 2.SqlSession和connection一样都是非线程安全，每次使用都应该去获取新的对象
	 * 3.mapper接口没有实现类，到那时mybatis会为这个接口生成一个代理对象（将接口和xml进行绑定）
	 * 4.两个重要的配置文件
	 *      mybatis的全局配置文件，包含数据库连接池信息，事务管理器信息等...系统运行环境信息
	 *      sql映射文件，保存了每一个sql语句的映射信息
	 * </p>
	 * @author: hounaikun
	 * @create: 2020-08-17 21:33
	 **/
	public class MyBatisTest {
	    static InputStream resource;
	    static SqlSessionFactory sessionFactory;
	    static {
	        try {
	            /*
	             * 从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。
	             * 但也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 file:// URL 构造的输入流。
	             * MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。
	             * */
	            resource = Resources.getResourceAsStream("mybatis-config.xml");
	            sessionFactory = new SqlSessionFactoryBuilder().build(resource);
	        } catch (IOException e) {
	            e.printStackTrace();
	        }finally {
	            try {
	                resource.close();
	            } catch (IOException e) {
	                e.printStackTrace();
	            }
	        }
	    }
	    @Test
	    public void test01() throws IOException {
	        SqlSession sqlSession = sessionFactory.openSession();
	        //mapper接口没有实现类，到那时mybatis会为这个接口生成一个代理对象（将接口和xml进行绑定）
	        StudentDao mapper = sqlSession.getMapper(StudentDao.class);
	        List<Student> students = mapper.queryAllStudent();
	        sqlSession.close();
	        System.out.println(students);
	    }
	    @Test
	    public void test02() throws IOException {
	        SqlSession sqlSession = sessionFactory.openSession();
	        //mapper接口没有实现类，到那时mybatis会为这个接口生成一个代理对象（将接口和xml进行绑定）
	        StudentDao mapper = sqlSession.getMapper(StudentDao.class);
	        mapper.deleteStudent("555ac6eae28d11eabc1400163e0ad81a");
	        /*
	        * 1.mybatis允许增删改直接定义以下类型返回值
	        *       Integer、Long、Boolean
	        * 2.我们需要手动提交数据
	        *       sqlSessionFactory.openSession(); ===>手动提交
	        *       sqlSessionFactory.openSession(true); ===>自动提交
	        * */
	        sqlSession.commit();
	        sqlSession.close();
	    }
	    @Test
	    public void test03() throws IOException {
	        SqlSession sqlSession = sessionFactory.openSession();
	        //mapper接口没有实现类，到那时mybatis会为这个接口生成一个代理对象（将接口和xml进行绑定）
	        StudentDao mapper = sqlSession.getMapper(StudentDao.class);
	        Student student = new Student();
	        student.setsName("pdd");
	        student.setsAge(23);
	        mapper.addStudent(student);
	        System.out.println(student);
	        sqlSession.commit();
	        sqlSession.close();
	    }
	}

四、参数处理
	单个参数：mybatis不会做特殊处理
		#{参数名}：取出参数值，其实如果只有一个参数，任何名称都是可以的。

	多个参数：mybatis会做特殊处理
		多个参数会被封装成一个map
			key:param1...paramn
		#{}就是从map中获取指定的key值

	命名参数：明确指定封装参数时map的key；@Param("id")
		多个参数会被封装成一个map
			key：使用@Param注解指定的值
			value：参数值
		#{指定的key}取出对应的参数值
	POJO（简单的javabean）：
		如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo
			#{属性名}：取出传入的pojo的属性值
	Map：
		如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我么也可以传入map
			#{key}，取出map中对应的值
	注意：如果是Collection（List、Set）类型或者数组，会特殊处理，也是把传入的list或者数组封装到map中
			map中的key分别为collection（其中List还可以使用list当作key），array
		getStudentByIds(List<Integer> ids);
		取值：取出第一个id的值，#{list[0]}

	源码解析（多看视频）：
		ParamNameResolver类

			例子：（@Param("id")Integer id,@Param("name")String name,Integer age))
			names值的确定：
				1.获取每个标了param注解的参数的@Param的值：id,name;赋值给names
				2.每次解析一个参数给map中保存信息：（key：参数索引，value:name的值）
					name的值：
						标注了param注解
							注解的值
						没有标注param注解
							1.加了全局配置（setting中）UseActualParamName:允许使用方法签名中的名称作为语句参数名称，name=参数名
								其中UseActualParamName默认值为true,为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。
							2.name=map.size；相当于当前元素的索引
					{0=id,1=name,2=arg2}
			public ParamNameResolver(Configuration config, Method method) {
		        Class<?>[] paramTypes = method.getParameterTypes();
		        Annotation[][] paramAnnotations = method.getParameterAnnotations();
		        SortedMap<Integer, String> map = new TreeMap();
		        int paramCount = paramAnnotations.length;

		        for(int paramIndex = 0; paramIndex < paramCount; ++paramIndex) {
		            if (!isSpecialParameter(paramTypes[paramIndex])) {
		                String name = null;
		                Annotation[] var9 = paramAnnotations[paramIndex];
		                int var10 = var9.length;

		                for(int var11 = 0; var11 < var10; ++var11) {
		                    Annotation annotation = var9[var11];
		                    if (annotation instanceof Param) {
		                        this.hasParamAnnotation = true;
		                        name = ((Param)annotation).value();
		                        break;
		                    }
		                }

		                if (name == null) {
		                    if (config.isUseActualParamName()) {
		                        name = this.getActualParamName(method, paramIndex);
		                    }

		                    if (name == null) {
		                        name = String.valueOf(map.size());
		                    }
		                }

		                map.put(paramIndex, name);
		            }
		        }

		        this.names = Collections.unmodifiableSortedMap(map);
		    }


			public Object getNamedParams(Object[] args) {
		        int paramCount = this.names.size();
		        if (args != null && paramCount != 0) {
		        	//如果只有一个元素，并且没有Param注解，args[0]，单个参数直接返回。
		            if (!this.hasParamAnnotation && paramCount == 1) {
		                return args[(Integer)this.names.firstKey()];
		            //多个元素或者有Param注解
		            } else {
		                Map<String, Object> param = new ParamMap();
		                int i = 0;
		                //遍历names {0=id,1=name,2=arg2}
		                for(Iterator var5 = this.names.entrySet().iterator(); var5.hasNext(); ++i) {
		                    Entry<Integer, String> entry = (Entry)var5.next();
		                    //names集合的value作为key，names集合的key作为args的索引；{id=args[0],name=args[1],arg2=args[2]}
		                    param.put(entry.getValue(), args[(Integer)entry.getKey()]);
		                    //额外的将每一个参数也保存到map中，使用新的key，param1...param2
		                    String genericParamName = "param" + String.valueOf(i + 1);
		                    if (!this.names.containsValue(genericParamName)) {
		                        param.put(genericParamName, args[(Integer)entry.getKey()]);
		                    }
		                }
		                //最终效用{id=args[0],param1=args[0],name=args[1],param2=args[1],arg2=args[2],param3=args[2]}
		                return param;
		            }
		        //如果参数为空直接返回
		        } else {
		            return null;
		        }
		    }

		# 和 $ 的区别：
			#{}：是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入
			${}：取出的值直接拼装在sql语句中；会有安全问题

			原生jdbc不支持占位符的地方我们就可以使用${}进行取值
				比如表名、列名等......

五、返回Map集合
    //返回一条记录的map；key就是列名，值就是对应的值；{s_id=3, s_age=20, s_no=4feef456e28d11eabc1400163e0ad81a, s_name=小宁}
    <select id="queryAllStudentLike" resultType="map">//其中单条值使用map
        select * from student
        where s_name like #{str}
    </select>
    Map<Integer,Object> queryAllStudentLike(String str);



    //多条记录封装一个map；键是这条记录的主键，值是记录封装后的javaBean
    <select id="queryAllStudentLike" resultType="com.kun.entity.Student"> //其中多条返回值使用集合里的值
        select * from student
        where s_name like #{str}
    </select>
    //@MapKey("id") 告诉mybatis封装这个map的时候使用哪个属性作为主键
    Map<Integer,Student> queryAllStudentLike(String str);
    @Test
    public void test04() throws IOException {
        SqlSession sqlSession = sessionFactory.openSession();
        //mapper接口没有实现类，到那时mybatis会为这个接口生成一个代理对象（将接口和xml进行绑定）
        StudentDao mapper = sqlSession.getMapper(StudentDao.class);
        Map<Integer,Object> students = mapper.queryAllStudentLike("%宁%");
        sqlSession.close();
        //{s_id=3, s_age=20, s_no=4feef456e28d11eabc1400163e0ad81a, s_name=小宁}
        System.out.println(students);
    }

六、javaBean和表映射
	1.自动映射
		全局setting设置
		autoMappingBehavior默认是PARTIAL，开启自动映射的功能。唯一的要求是列名和javaBean属性名一致
	2.高级映射：resultMap
		<resultMap id="myStu" type="com.kun.entity.Student">
	        <!--注意：column的值是select查出来的临时表的列名，有可能查询的时候起别名-->
	        <!--指定主键列的封装规则
		        id定义主键 底层有优化
		        column:指定哪一列
		        property：指定对应的javaBean属性
	        -->
	        <id column="s_id" property="sId"/>
	        <!--
	            定义普通列封装规则，不指定的列会自动封装（按照自动映射规则）
	        -->
	        <result column="s_no" property="sNo"/>
	        <result column="s_name" property="sName"/>
	        <result column="s_age" property="sAge"/>
	        <!--association可以指定联合的javaBean对象，只关联一个对象
		        property="clazz":指定哪个属性是联合对象
		        javaType:指定这个属性对象的类型[不能省略]
	        -->
	        <association property="clazz" javaType="">
	            <id column="cid" property="id"/>
	            <result column="" property=""/>
	        </association>
	        <!--collection关联多个对象,类似集合；定义关联的集合类型的属性的封装规则
	        	property="":指定哪个属性是联合对象
	        	ofType="":指定集合里面元素的类型

	        	注意：也有select分步查询的功能
	        -->
	        <collection property="" ofType="">
	            <id/>
	            <result/>
        	</collection>
	        <!--
	            association定义关联对象的封装规则
	            select:表明当前属性是调用select指定的方法查处出的结果
	            column：指定将哪一列的值传给这个方法（select方法）

	            流程：使用select指定的方法（传入column的值使用）查出对象，并封装给property
	            扩展：多列的值传递过去：
	            		将多列的值封装map传递；
	            		column="{key=column1,key2=column2}"
	            	 fetchType="lazy":表示延迟加载（局部开启，全局也需要开启才能生效）
	            	 	-lazy：延迟
	            	 	-eager：立即
	        -->
	        <association property="clazz" select="select语句的id" column="">

	        </association>
	    </resultMap>
	3.全局开启延迟加载（setting中设置）
		lazyLoadingEnabled	延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。	默认false
		aggressiveLazyLoading	开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。默认false （在 3.4.1 及之前的版本中默认为 true）
	4.鉴别器
		是什么？
			mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
		怎么用？
			<!--
	            discriminator – 使用结果值来决定使用哪个 resultMap
	            case – 基于某些值的结果映射
	            嵌套结果映射 – case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射
	            column:指定判断的列名
	            javaType:列值对应的java类型
	        -->
	        <discriminator javaType="" column="">
	            <!--value 是column的值
	                resultType:指定封装的结果类型-->
	            <case value="" resultType="">
	                <!--可以放-->
	            </case>
	        </discriminator>

七、动态Sql
	详见文档。https://mybatis.org/mybatis-3/zh/dynamic-sql.html
	不只是方法传递过来的参数可以用来判断，取值。。。
	mybatis默认还有两个内置参数：
		_parameter:代表整个参数
			单个参数：_parameter就是这个参数
			多个参数：_parameter就是map
		_databaseId:如果配置了databaseIdProvider（配置文件中配置）标签。
			_databaseId就是代表当前数据库的别名

	<sql id=""></sql>抽取可重用的sql片段
	<include refid=""></include>引用外部定义的sql

八、缓存机制
	两级缓存：
		一级缓存：（本地缓存）sqlSession级别的缓存,一直开启
			是什么？
				与数据库同一次会话期间查询到的数据会放在本地缓存中，以后如果要获取相同的数据，直接从缓存中拿，没必要去查询数据库
			失效情况：没有使用到当前一级缓存的情况，效果就是，还需要再向数据库发出查询
				1.sqlSession不同
				2.sqlSession相同，查询条件不同（当前一级缓存中还没有这个数据）
				3.sqlSession相同，两次查询之间进行了增删改操作（此次增删改可能对当前数据有影响）
				4.sqlSession相同，手动清除了一级缓存；sqlSession.clearCache();

		二级缓存：（全局缓存）：基于namespace级别的缓存，一个namespace对应一个二级缓存
			工作机制：
				1.一个会话，查询一条数据，这个数据就会放在当前会话的一级缓存中，
				2.如果会话关闭，一级缓存中的数据会被保存到二级缓存中，新的会话查询信息，就可以参照二级缓存中的数据
				3.不同namespace查出的数据会放在自己对应的缓存中（map）
				效果：效果会从二级缓存中获取
						查出的数据都会默认放在自己的一级缓存中，只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中

			使用：
				1.开启全局二级缓存设置（setting）虽然它是默认开启的，但是为了防止版本的改变，我们要显式的设置
				2.去mapper.xml中配置使用二级缓存
					    <cache blocking="" eviction="" flushInterval="" readOnly="" size="" type=""></cache>
					    eviction:缓存的回收策略：
					    	可用的清除策略有：
							LRU – 最近最少使用：移除最长时间不被使用的对象。
							FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
							SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。
							WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。
							默认的清除策略是 LRU。
						flushInterval：缓存刷新间隔
							缓存多长时间清空一次，默认不清空，设置一个毫秒值
						readOnly：是否只读
							true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
										mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全、速度块
							false：非只读;mybatis觉得获取的数据可能会被修改
										mybatis会利用序列化&反序列化的技术克隆一份新的数据给你。安全、速度慢
							默认是false
						size：缓存放多少元素
						type:指定自定义缓存，使用全类名
				3.我们的POJO需要实现序列化接口	

		和缓存有关的设置/属性：
			1.cacheEnabled=true(默认);false:关闭缓存（关闭二级缓存，一级缓存是可以用的）	
			2.每个select标签都有useCache="true"（默认）;false:不使用缓存（一级缓存是可以用的，二级缓存不使用）
			3.每个增删改：flushCache="true"（默认）;增删改执行完后就会清除缓存
							测试：flushCache="true"；一级缓存就清空了；二级缓存也会被清空；
			4.每个select标签也有useCache="false"（默认）；如果useCache="true"，每次查询之后就会清一级、二级缓存
			5.sqlSessoion.clearCache();只是清除当前session的一级缓存
			6.localChcheScope（setting）：本地缓存作用域；（一级缓存SESSION）；当前会话的所有数据保存在会话缓存中
														STATEMENT：可以禁用一级缓存

九、mybatis和spring整合
	导包：
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.3.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.4.6</version>
		</dependency>
	ssm整合配置：
		具体详看ssm整合笔记
	整合mybatis目的：
		1.spring管理所有组件、mapper的实现类
			可以@Autowired：自动注入mapper
		2.spring 用来管理事务
		。。。
十、mybatis逆向工程MBG
	1.是什么？
		mybatis Generator：代码生成器
		官方文档地址：http://www.mybatis.org/generator
		官方工程地址：http://github.com/mybatis/generator/releases
十一、工作原理
	1.获取sqlSessionFactiory对象
		sessionFactory = new SqlSessionFactoryBuilder().build(resource);
		解析文件的每一个信息保存在Configuration中，返回包含Configuration的DefaultSqlSession对象
		注意：【MappedStatement】：代表一个增删改查的详细信息
		工作原理图示1。
	2.获取sqlSession对象
		SqlSession sqlSession = sessionFactory.openSession();
		返回一个DefalutSqlSession对象，包含Executor和Configuration
			这一步会创建Executor对象
		工作原理图示2
	3.获取接口的代理对象（MapperProxy）
		StudentDao mapper = sqlSession.getMapper(StudentDao.class);
		getMapper(),使用MapperProxyFactory创建一个MapperProxy代理对象
			代理对象包含了DefaultSqlSession（Executor）
		工作原理图示3
	4.执行代理对象的增删改方法
		工作原理图示4
		查询路程总结
	5.总结：
		1）根据配置文件（全局，sql映射）初始化出configuration对象
		2）创建一个DefaultSqlSession对象，它包含configuration以及
			Executor（根据全局配置文件中的defaultExecutorType创建出对应的Executor）
		3）DefaultSqlSession.getMapper():拿到Mapper接口对应的MapperProxy；
		4）MapperProxy里面有（DefaultSqlSession）；
		5）执行增删改查方法：
			1.调用DefaultSqlSession的增删改查；
			2.最终会创建一个StatementHandler对象。（同时也会创建出parameterHandler和ResultSetHandler）
			3.调用statementHandler的预编译参数以及设计参数值；使用parameterHandler来给sql设置参数
			4.调用statementHandler的增删改查方法
			5.ResultSetHandler封装结果
		注意：
			四大对象每个创建的时候都有一个interceptorChain.pluginALl(parameter)流程。
十二、插件编写（多看视频）
	1、编写Interceptor的实现类
	2、使用@Intercepts完成插件签名
	3、将写好的插件注册到全局配置文件中
		在mybatis全局配置文件中的<plugin inteceptor="全类名"></plugin>

	/*
	* 完成插件签名：
	*   告诉mybatis当前插件用来拦截哪个对象的哪个方法
	* */
	@Intercepts({
	        @Signature(type = StatementHandler.class,method = "",args = {})
	})
	public class MyFirstPlugin implements Interceptor {
	    /*
	    * intercept:拦截
	    *   拦截目标对象的目标方法的执行
	    * */
	    @Override
	    public Object intercept(Invocation invocation) throws Throwable {
	        //执行目标方法
	        Object proceed = invocation.proceed();
	        //返回执行后的返回值
	        return proceed;
	    }

	    /*
	    * plugin：
	    *   包装目标对象：包装，为目标对象创建一个代理对象
	    * */
	    @Override
	    public Object plugin(Object target) {
	        //我们可以借助Plugin的wrap方法来使用当前的Interceptor包装我们的目标对象
	        Object wrap = Plugin.wrap(target, this);
	        //返回当前target创建的动态代理对象
	        return wrap;
	    }

	    /*
	    * setProperties
	    *   将插件注册时的Properties属性设置进来
	    * */
	    @Override
	    public void setProperties(Properties properties) {

	    }
	}

	分页插件：
		https://pagehelper.github.io/docs/howtouse/
	批量：
		不要再全局（setting）中配置defaulExecutorType = BATCH(所有的sql都会执行)
		在sqlSession中配置：
			//可以执行批量操作的sqlSession
			SqlSession sqlSession = sessionFactory.openSession(ExecutorType.BATCH);
			StudentDao mapper = sqlSession.getMapper(StudentDao.class);
			for(i=0;i<100;i++){
				mapper.addStudent(new Student());
			}
			sqlSession.commit();
十三、mybatis调用存储过程：
	<!--1.使用select调用存储过程
		3.statementType="CALLBLE":表示要调用存储过程
	-->
	<select id="" statementType="CALLBLE">
		{call 存储过程名(
			#{start,mode=IN,jdbcType="INTEGER"},
			#{count,mode=OUT,jdbcType="INTEGER"},
		)}
	</select>
十四、TypeHandler自定义类型处理器



