一、EL：
1.是什么：
	表达式的全称是：Expression Language，是表达式语言。
2.有什么用：
	EL 表达式主要是代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出。
3.格式：
	3.1${表达式}
		EL表达式在输出null值的时候，输出的是空串。jsp表达式脚本输出null值的时候，输出的是null字符串
	3.2搜索域数据的顺序：
		EL 表达式主要是在 jsp 页面中输出数据。
		主要是输出域对象中的数据。
		当四个域中都有相同的 key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。
	3.3EL表达式输出 Bean 的普通属性，数组属性。List 集合属性，map 集合属性
		输出 Person：${ p }<br/>
		输出 Person 的 name 属性：${p.name} <br>
		输出 Person 的 pnones 数组属性值：${p.phones[2]} <br>
		输出 Person 的 cities 集合中的元素值：${p.cities} <br>
		输出 Person 的 List 集合中个别元素值：${p.cities[2]} <br>
		输出 Person 的 Map 集合: ${p.map} <br>
		输出 Person 的 Map 集合中某个 key 的值: ${p.map.key3} <br>
		输出 Person 的 age 属性：${p.age} <br>
	3.4EL表达式-运算
		语法：${ 运算表达式 } ， EL 表达式支持如下运算符
		例子：
			- empty运算：可以判断一个数据是否为空，如果为空，则输出true,不为空输出false。
				以下几种情况为空：
					1、值为null值的时候，为空
					2、值为空串的时候，为空
					3、值是Object类型数组，长度为零的时候
					4、list集合，元素个数为零5、map集合，元素个数为零
					5、map集合，元素个数为零
			- 三元运算：?:
			- “.”点运算和[]中括号运算符:
				.点运算，可以输出Bean对象中某个属性的值。
				[]中括号运算，可以输出有序集合中某个元素的值。
					并且[]中括号运算，还可以输出map集合中key里含有特殊字符的key的值。
			- EL表达式的11个隐含对象:
				EL个达式中11个隐含对象，是EL表达式中自己定义的，可以直接使用。
				pageContext PageContextImpl它可以获取jsp中的九大内置对象
					使用：
						1.协议：${req.scheme}<br>
						2.服务器ip：${pageContext.request.serverName}<br>
						3.服务器端口：${pageContext.request.serverPort}<br>
						4.获取工程路径：${pageContext.request.contextPath}<br>
						5.获取请求方法：${pageContext.request.method}<br>
						6.获取客户端ip地址：${pageContext.request.remoteHost}<br>
						7.获取会话的id编号：${pageContext.session.id}<br>
				pageScope Map<String,Object>它可以获取pageContext域中的数据
				requestScope Map<String,Object>它可以获取Request域中的数据
				sessionScope Map<String,Object>它可以获取Session域中的数据
				applicationScope Map<String,Object>它可以获取ServletContext域中的数据
				param Map<String,String>它可以获取请求参数的值
				paramValues Map<String,String[]>它也可以获取请求参数的值，获取多个值的时候使用。
				header Map<String,String>它可以获取请求头的信息
				headerValues Map<String,String[]>它可以获取请求头的信息，它可以获取多个值的情况
				cookie Map<String,Cookie>它可以获取当前请求的Cookie信息
				initParam Map<String,String>它可以获取在web.xml中配置的<context-param>上下
			- EL获取四个特定域中的属性
				pageScope======pageContext域
				requestScope======Request域
				sessionScope======Session域
				applicationScope======ServletContext域

二、JSTL标签库
	JSTL标签库 全称 JSPStandardTagLibraryJSP标准标签库。
	JSTL由五个不同功能的标签库组成。
	功能范围:
		核心标签库--重点 http://java.sun.com/jsp/jstl/core c
		格式化http://java.sun.com/jsp/jstl/fmt fmt
		函数http://java.sun.com/jsp/jstl/functions fn
		数据库(不使用)http://java.sun.com/jsp/jstl/sql sql
		XML(不使用)http://java.sun.com/jsp/jstl/xml x
	在jsp标签库中使用taglib指令引入标签库:
		CORE标签库 <%@taglibprefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
		XML标签库 <%@taglibprefix="x" uri="http://java.sun.com/jsp/jstl/xml"%>
		FMT标签库 <%@taglibprefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
		SQL标签库 <%@taglibprefix="sql" uri="http://java.sun.com/jsp/jstl/sql"%>
		FUNCTIONS标签库 <%@taglibprefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
	使用步骤：
		1、先导入jstl标签库的jar包。
			taglibs-standard-impl-1.2.1.jar
			taglibs-standard-spec-1.2.1.jar
		2、使用taglib指令引入标签库。
			<%@taglibprefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
		3、核心库的使用：
			<%--
				<c:if/>if标签用来做if判断。test属性表示判断的条件（使用EL表达式输出）
			--%>
			<c:if test="${12==12}">
				<h1>12等于12</h1>
			</c:if>
			<c:if test="${12!=12}">
				<h1>12不等于12</h1>
			</c:if>

			<c:choose><c:when><c:otherwise>
			标签作用：多路判断。跟switch...case....default非常接近
			choose标签开始选择判断
			when标签表示每一种判断情况
				test属性表示当前这种判断情况的值
			otherwise标签表示剩下的情况
			<c:choose><c:when><c:otherwise>标签使用时需要注意的点：
				1、标签里不能使用html注释，要使用jsp注释
				2、when标签的父标签一定要是choose标签
			例子：
				<c:choose>
					<c:when test="${requestScope.height>190}">
						<h2>小巨人</h2></c:when>
					<c:when test="${requestScope.height>180}">
						<h2>很高</h2>
					</c:when>
					<c:otherwise>
						<c:choose>
							<c:when test="${requestScope.height>160}">
								<h3>大于160</h3>
							 </c:when>
						</c:choose>
					</c:otherwise>
				</c:choose>

			<%--
				1.遍历1到10，输出
				begin属性设置开始的索引
				end属性设置结束的索引
				var属性表示循环的变量(也是当前正在遍历到的数据)
				for(inti=1;i<10;i++)
			--%>
				<table border="1">
					<c:forEach begin="1" end="10" var="i">
						<tr>
							<td>第${i}行</td>
						</tr>
					</c:forEach>
				</table>

			<%--
				2.遍历Object数组
				for(Objectitem:arr)
				items表示遍历的数据源（遍历的集合）
				var表示当前遍历到的数据
			--%>
			<c:forEach items="${requestScope.arr}" var="item">
				${item}<br>
			</c:forEach>

			遍历Map集合
			<c:forEach items="${requestScope.map}" var="entry">
				<h1>${entry.key} = ${entry.value}</h1>
			</c:forEach>

			<%--
				items表示遍历的集合
				var表示遍历到的数据
				begin表示遍历的开始索引值
				end表示结束的索引值
				step属性表示遍历的步长值
				varStatus属性表示当前遍历到的数据的状态
				for（inti=1;i<10;i+=2）
			--%>
			<c:forEach begin="2" end="7" step="2" varStatus="status" items="${requestScope.stus}" var="stu">
				<tr>
					<td>${stu.id}</td>
					<td>${stu.username}</td>
					<td>${stu.password}</td>
					<td>${stu.age}</td>
					<td>${stu.phone}</td>
					<td>${status.step}</td>
				</tr>
			</c:forEach>